<?xml version="1.0" encoding="UTF-8"?>
<java version="1.5" class="java.beans.XMLDecoder">
 <object class="java.util.HashMap">

  <void method="put">
   <string>HDB</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select trigger_name,
       trigger_action_time as trigger_type,
       trigger_event,
       subject_table_schema||'.'||subject_table_name as trigger_table,
       null as remarks,
	     case
          when is_enabled = 'TRUE' then 'ENABLED'
	        else 'DISABLED'
       end as status,
       triggered_action_level as trigger_level
from sys.triggers
where trigger_name not like '#_SYS#_TRIGGER%' escape '#'
</string>
    </void>
    <void property="objectNameField">
     <string>subject_table_name</string>
    </void>
    <void property="schemaField">
     <string>subject_table_schema</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>SQLite</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select name as trigger_name,
       null as trigger_type,
       null as trigger_event,
       tbl_name as trigger_table,
       null as remarks
from main.sqlite_schema where type = 'trigger'
</string>
    </void>
    <void property="objectNameField">
     <string>tbl_name</string>
    </void>
    <void property="orderBy">
      <!-- this is a hack to make string comparison case insensitive -->
      <!-- it is not really an order by statement by may be added at the same -->
      <!-- place as the order by keyword -->
      <string>collate nocase</string>
    </void>

   </object>
  </void>

  <void method="put">
   <string>SQLBase</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select trg.name as trigger_name,
       @decode(actiontime, 'A', 'AFTER', 'BEFORE') as trigger_type,
       @decode(triggerevent, 'I', 'INSERT', 'U', 'UPDATE', 'D', 'DELETE') as trigger_event,
       tbl.name as trigger_table
from sysadm.systriggers trg
  join sysadm.systables tbl on tbl.snum = trg.tbsnum
</string>
    </void>
    <void property="objectNameField">
     <string>tbl.name</string>
    </void>
    <void property="schemaField">
     <string>tbl.creator</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Teradata</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select TriggerName as trigger_name,
       case ActionTime
          when 'A' then 'AFTER'
          when 'B' then 'BEFORE'
       end as trigger_type,
       case Event
         when 'U' then 'UPDATE'
         when 'D' then 'DELETE'
         when 'I' then 'INSERT'
       end as trigger_event,
       TableName as trigger_table
from DBC.Triggers
</string>
    </void>
    <void property="objectNameField">
     <string>TableName</string>
    </void>
    <void property="schemaField">
     <string>DatabaseName</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>MonetDB</string>
   <object id="list_derby_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
          select trg.name as trigger_name,
                 case
                    when trg.time = 1 then 'AFTER'
                    when trg.time = 0 then 'BEFORE'
                    else 'n/a'
                 end as trigger_type,
                 case
                    when trg.event = 0 then 'INSERT'
                    when trg.event = 1 then 'DELETE'
                    when trg.event = 2 then 'UPDATE'
                    else 'n/a'
                 end as trigger_event,
                 tbl.name as trigger_table
          from sys.triggers trg
            join sys.tables tbl on tbl.id = trg.table_id
            join sys.schemas sh on tbl.schema_id = sh.id
     </string>
    </void>
    <void property="objectNameField">
     <string>tbl.name</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trg.name</string>
    </void>
    <void property="schemaField">
     <string>sh.name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>NuoDB</string>
   <object id="list_derby_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
        select triggername as trigger_name,
               case
                 when type_mask in (2,8,32) then 'AFTER'
                 when type_mask in (1,4,16) then 'BEFORE'
               end as trigger_type,
               case
                 when type_mask in (8,4) then 'UPDATE'
                 when type_mask in (1,2) then 'INSERT'
                 when type_mask in (16,32) then 'DELETE'
               end as trigger_event,
               tablename as trigger_table
        from system.triggers
     </string>
    </void>
    <void property="objectNameField">
     <string>tablename</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY triggername</string>
    </void>
    <void property="schemaField">
     <string>schema</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Apache Derby</string>
   <object id="list_derby_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
      SELECT ts.schemaname as trigger_schema,
             trg.triggername as trigger_name,
            case
                 when trg.type ='A' then 'AFTER'
                 else 'BEFORE'
            end  as trigger_type ,
            case
               when trg.event = 'D' then 'DELETE'
               when trg.event = 'I' then 'INSERT'
               when trg.event = 'U' THEN 'UPDATE'
            end as trigger_event,
            s.schemaname as trigger_table_schema,
            t.tablename as trigger_table
      FROM sys.systriggers trg
        JOIN sys.sysschemas ts ON ts.schemaid = trg.schemaid
        JOIN sys.systables t ON trg.tableid = t.tableid
        JOIN sys.sysschemas s ON t.schemaid = s.schemaid
     </string>
    </void>
    <void property="objectNameField">
     <string>t.tablename</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
    <void property="schemaField">
     <string>ts.schemaname</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Cloudscape</string>
   <object idref="list_derby_trg"/>
  </void>

  <void method="put">
   <string>Informix Dynamic Server</string>
   <object id="list_informix_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
       SELECT trg.owner as trigger_schema,
              trg.trigname as trigger_name,
              '' trigger_type ,
              case
                when trg.event = 'D' then 'DELETE'
                when trg.event = 'I' then 'INSERT'
                when trg.event = 'U' THEN 'UPDATE'
                else trg.event
              end as trigger_event,
              t.owner as trigger_table_schema,
              t.tabname as trigger_table
       from informix.systriggers trg, informix.systables t
       where trg.tabid = t.tabid
     </string>
    </void>
    <void property="objectNameField">
     <string>t.tabname</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trg.trigname</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>INFORMIX-SQL</string>
   <object id="list_informix_sql_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
        SELECT trg.trigname trigger_name,
               "DELETE" trigger_type,
               t.tabname trigger_table
        from informix.systriggers trg, informix.systables t
        where trg.tabid = t.tabid and trg.event='D'
        UNION
        SELECT trg.trigname,
               "UPDATE",
                t.tabname
        from informix.systriggers trg, informix.systables t
        where trg.tabid = t.tabid and trg.event='U'
        UNION
        SELECT trg.trigname,
               "INSERT",
               t.tabname
        from informix.systriggers trg, informix.systables t
        where trg.tabid = t.tabid and trg.event='I';
    </string>
    </void>
    <void property="objectNameField">
     <string>t.tabname</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY 1</string>
    </void>
   </object>
  </void>

  <!-- DB2 for z/OS identifies itself as DB2 -->
  <void method="put">
   <string>$dbid:db2h</string>
   <object id="db2_host_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>SELECT name as trigger_name,
        CASE trigtime
           when 'A' then 'AFTER'
           when 'B' then 'BEFORE'
           when 'I' then 'INSTEAD'
        END as trigger_type,
        CASE trigevent
          when 'I' then 'INSERT'
          when 'U' then 'UPDATE'
          when 'D' then 'DELETE'
        END AS trigger_event,
        tbname as trigger_table,
        tbowner as trigger_table_schema
     FROM sysibm.systriggers</string>
    </void>
    <void property="objectNameField">
     <string>tbname</string>
    </void>
    <void property="schemaField">
     <string>tbowner</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY 1</string>
    </void>
   </object>
  </void>

  <!-- db2 LUW -->
  <void method="put">
   <string>$dbid:db2</string>
   <object id="db2_lst_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>select trigname as trigger_name,
        case trigtime
           when 'A' then 'AFTER'
           when 'B' then 'BEFORE'
           when 'I' then 'INSTEAD'
        end as trigger_type,
        case  trigevent
          when 'I' then 'INSERT'
          when 'U' then 'UPDATE'
          when 'D' then 'DELETE'
          when 'M' then 'MULTIPLE'
        end as trigger_event,
       tabname as trigger_table,
       tabschema as trigger_table_schema,
       case
         when valid = 'N' then 'INVALID'
         when valid = 'X' then 'INOPERATIVE'
         else 'VALID'
       end as status,
       remarks,
       case
         when granularity = 'R' then 'ROW'
         else 'STATEMENT'
       end as TRIGGER_LEVEL
from syscat.triggers</string>
    </void>
    <void property="objectNameField">
     <string>tabname</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY 1</string>
    </void>
    <void property="schemaField">
     <string>tabschema</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>$dbid:oracle</string>
   <object id="list_oracle_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
SELECT owner as trigger_schema,
       trigger_name,
       case
         when trigger_type like 'BEFORE%' then 'BEFORE'
         when trigger_type like 'AFTER%' then 'AFTER'
         else trigger_type
       end as trigger_type,
       triggering_event as trigger_event,
       table_owner as trigger_table_schema,
       table_name as trigger_table,
       base_object_type as trigger_table_type,
       '' as remarks,
       status,
       case
         when trigger_type like '%ROW' then 'ROW'
         when trigger_type like '%STATEMENT' then 'STATEMENT'
       end as trigger_level
FROM all_triggers
WHERE trigger_name not like 'BIN$%'
    </string>
    </void>
    <void property="objectNameField">
     <string>table_name</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
    <void property="schemaField">
     <string>owner</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Adaptive Server Enterprise</string>
   <object id="list_asa_trg" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>select trigname as trigger_name, trigtime as trigger_type, event as trigger_event from systriggers</string>
    </void>
    <void property="objectNameField">
     <string>tname</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Adaptive Server Anywhere</string>
   <object idref="list_asa_trg"/>
  </void>

  <void method="put">
   <string>SQL Anywhere</string>
   <object idref="list_asa_trg"/>
  </void>

  <void method="put">
   <string>Microsoft SQL Server</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
      select tsh.name as trigger_schema,
             tr.name as trigger_name,
             case
                when ObjectProperty(tr.object_id, 'ExecIsAfterTrigger') = 1 then 'AFTER'
                when ObjectProperty(tr.object_id, 'ExecIsInsteadOfTrigger') = 1 then 'INSTEAD OF'
                else 'BEFORE'
             end  as trigger_type,
             case
                when ObjectProperty(tr.object_id, 'ExecIsUpdateTrigger') = 1 then 'UPDATE'
                when ObjectProperty(tr.object_id, 'ExecIsDeleteTrigger') = 1 then 'DELETE'
                when ObjectProperty(tr.object_id, 'ExecIsInsertTrigger') = 1then 'INSERT'
             end as trigger_event,
             sh.name as trigger_table_schema,
             tab.name as trigger_table,
             case
                when tab.type = 'U' then 'TABLE'
                when tab.type = 'V' then 'VIEW'
             end as trigger_table_type,
             null as remarks,
             case
                when is_disabled = 1 then 'DISABLED'
                else 'ENABLED'
             end  as status
      from sys.triggers tr with (nolock)
        join sys.objects tab with (nolock) on tab.object_id = tr.parent_id
        join sys.schemas sh with (nolock) on sh.schema_id = tab.schema_id
        join sys.objects tro with (nolock) on tro.object_id = tr.object_id
        join sys.schemas tsh with (nolock) on tsh.schema_id = tro.schema_id
      where tr.is_ms_shipped = 0
     </string>
    </void>
    <void property="objectNameField">
     <string>tab.name</string>
    </void>
    <void property="schemaField">
      <string>sh.name</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Microsoft SQL Server-8</string>
   <object id="trg_list_mssql8" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
	select tr.name as trigger_name,
         case
            when ObjectProperty(tr.id, 'ExecIsAfterTrigger') = 1 then 'AFTER'
            when ObjectProperty(tr.id, 'ExecIsInsteadOfTrigger') = 1 then 'INSTEAD OF'
            else 'BEFORE'
         end  as trigger_type,
         case
             when ObjectProperty(tr.id, 'ExecIsUpdateTrigger') = 1 then 'UPDATE'
             when ObjectProperty(tr.id, 'ExecIsDeleteTrigger') = 1 then 'DELETE'
             when ObjectProperty(tr.id, 'ExecIsInsertTrigger') = 1 then 'INSERT'
          end as trigger_event,
       null as trigger_table_schema,
       tab.name as trigger_table,
       null as remarks,
       null as status
	from sysobjects tr with (nolock)
	  join sysobjects tab with (nolock) on tab.id = tr.parent_obj
	where  tr.xtype = 'TR'
     </string>
    </void>
    <void property="objectNameField">
     <string>tab.name</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Microsoft SQL Server-7</string>
   <object idref="trg_list_mssql8"/>
  </void>

  <void method="put">
   <string>Microsoft SQL Server-6</string>
   <object idref="trg_list_mssql8"/>
  </void>

  <void method="put">
   <string>MySQL</string>
   <object id="trg_list_mysql" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
       SELECT trigger_name,
              action_timing AS trigger_type,
              event_manipulation as trigger_event,
              event_object_table as trigger_table
       FROM information_schema.triggers
      </string>
    </void>
    <void property="objectNameField">
     <string>event_object_table</string>
    </void>
    <void property="catalogField">
     <string>event_object_schema</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>
  <void method="put">
   <string>MariaDB</string>
   <object idref="trg_list_mysql"/>
  </void>


  <void method="put">
   <string>H2</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
        SELECT trigger_name,
               trigger_type,
               case before when 'true' then 'BEFORE' else 'AFTER' end as trigger_event,
               table_name as trigger_table
        FROM information_schema.triggers</string>
    </void>
    <void property="objectNameField">
     <string>table_name</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>H2-2</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
SELECT trigger_schema,
       trigger_name,
       event_manipulation as trigger_type,
       action_timing as trigger_event,
       event_object_schema as trigger_table_schema,
       event_object_table as trigger_table,
       remarks
FROM information_schema.triggers
      </string>
    </void>
    <void property="objectNameField">
     <string>event_object_table</string>
    </void>
    <void property="schemaField">
     <string>event_object_schema</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>HSQL Database Engine</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
       SELECT trigger_name,
              trigger_type,
              triggering_event as trigger_event,
              table_name as trigger_table
       FROM information_schema.system_triggers</string>
    </void>
    <void property="objectNameField">
     <string>table_name</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>HSQL Database Engine-2</string>
   <object id="hsqldb20" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
       SELECT trigger_schema,
              trigger_name,
              action_timing as trigger_type,
              event_manipulation as trigger_event,
              event_object_schema as trigger_table_schema,
              event_object_table as trigger_table,
              null as remarks,
              null as status,
              action_orientation as trigger_level
       FROM information_schema.triggers</string>
    </void>
    <void property="schemaField">
     <string>EVENT_OBJECT_SCHEMA</string>
    </void>
    <void property="objectNameField">
     <string>EVENT_OBJECT_TABLE</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Firebird</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
SELECT *
FROM (
  SELECT trg.rdb$trigger_name AS TRIGGER_NAME,
         case
           when trg.rdb$trigger_type = 0 then 'UNKNOWN'
           when mod(trg.rdb$trigger_type, 2) = 0 then 'AFTER'
         else 'BEFORE'
         END AS trigger_type,
         case bin_and(trg.rdb$trigger_type + 1, 254)
            when  2 then 'INSERT'
            when  4 THEN 'UPDATE'
            when  6 then 'DELETE'
            when  18 then 'INSERT OR UPDATE'
            when  26 then 'INSERT OR DELETE'
            when  12 then 'UPDATE OR INSERT'
            when  28 then 'UPDATE OR DELETE'
            when  14 then 'DELETE OR INSERT'
            when  22 then 'DELETE OR UPDATE'
            when  114 then 'INSERT OR UPDATE OR DELETE'
            when  60 then 'UPDATE OR DELETE OR INSERT'
            when  78 then 'DELETE OR INSERT OR UPDATE'
         end as trigger_event,
         trim(trg.rdb$relation_name) as trigger_table,
         null as remarks,
         case trg.rdb$trigger_inactive
           when 1 then 'DISABLED'
           else 'ENABLED'
         end as status,
         case
            when rel.rdb$relation_type = 0 then 'TABLE'
            when rel.rdb$relation_type = 1 then 'VIEW'
         end as trigger_table_type
  FROM rdb$triggers trg
     JOIN rdb$relations rel on rel.rdb$relation_name = trg.rdb$relation_name
  WHERE trg.rdb$system_flag = 0
    AND trg.rdb$relation_name is not null

  UNION ALL

  SELECT rdb$trigger_name AS TRIGGER_NAME,
         case
           when rdb$trigger_type = 0 then 'UNKNOWN'
           when mod(rdb$trigger_type, 2) = 1 then 'AFTER'
           else 'BEFORE'
         END AS trigger_type,
         'DDL' as trigger_event,
         null as trigger_table,
         null as remarks,
         case rdb$trigger_inactive
           when 1 then 'DISABLED'
           else 'ENABLED'
         end as status,
         null as trigger_table_type
  FROM rdb$triggers
  WHERE rdb$system_flag = 0
   AND rdb$relation_name IS NULL
)
      </string>
    </void>
    <void property="objectNameField">
     <string>trigger_table</string>
    </void>
    <void property="orderBy">
     <string>ORDER BY trigger_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>INGRES</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select rdef.rule_name as trigger_name,
       'AFTER' as trigger_type,
       case rdef.rule_statement
          when 1 then 'DELETE'
          when 2 then 'INSERT'
          when 4 then 'UPDATE'
          when 3 then 'INSERT,DELETE'
          when 6 then 'INSERT,UPDATE'
          when 5 then 'UPDATE,DELETE'
          when 7 then 'INSERT,UPDATE,DELETE'
          else ''
       end as trigger_event
from iirule rdef, iirules rlist
where rdef.rule_name = rlist.rule_name
     </string>
    </void>
    <void property="objectNameField">
     <string>rlist.table_name</string>
    </void>
    <void property="schemaField">
     <string>rlist.rule_owner</string>
    </void>
    <void property="orderBy">
     <string>order by rlist.rule_name</string>
    </void>
   </object>
  </void>

 </object>
</java>
